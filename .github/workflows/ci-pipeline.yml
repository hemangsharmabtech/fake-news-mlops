name: MLOps CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-pipeline:
    name: Test DVC Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install "dvc[s3]"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup DVC remote
      run: |
        # Remove existing remote if it exists
        dvc remote remove myremote || true
        # Add remote with force flag
        dvc remote add myremote ${{ secrets.DVC_S3_BUCKET }} --force
        dvc remote modify myremote region ${{ secrets.AWS_REGION }}
        echo "✅ DVC remote configured successfully"

    - name: Test DVC remote
      run: |
        echo "Testing DVC remote configuration..."
        dvc remote list
        dvc status -r myremote

    - name: Pull data from DVC
      run: |
        echo "Pulling data from DVC remote..."
        dvc pull -r myremote
        echo "✅ DVC pull completed"

    - name: Test data ingestion
      run: |
        dvc repro data_ingestion
        echo "✅ Data ingestion stage completed"

    - name: Test feature engineering
      run: |
        dvc repro feature_engineering
        echo "✅ Feature engineering stage completed"

    - name: Test model building
      run: |
        dvc repro model_building
        echo "✅ Model building stage completed"

    - name: Test Random Forest pipeline
      run: |
        dvc repro evaluate_rf_model
        echo "✅ Random Forest pipeline completed"

    - name: Validate metrics
      run: |
        python -c "
        import json
        # Check if metrics files exist and have valid content
        with open('model/metrics.json') as f:
            lr_metrics = json.load(f)
        with open('metrics/rf/metrics.json') as f:
            rf_metrics = json.load(f)
        
        # Validate accuracy thresholds
        assert lr_metrics.get('accuracy', 0) > 0.9, 'Linear Regression accuracy too low'
        assert rf_metrics.get('accuracy', 0) > 0.9, 'Random Forest accuracy too low'
        print('✅ All metrics validation passed!')
        "

    - name: Upload metrics as artifact
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-metrics
        path: |
          model/metrics.json
          metrics/rf/metrics.json
        retention-days: 30

    - name: Upload DVC cache
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dvc-cache
        path: .dvc/cache
        retention-days: 1
