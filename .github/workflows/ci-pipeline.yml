name: MLOps CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-pipeline:
    name: Test DVC Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for DVC

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install DVC
      run: |
        pip install "dvc[s3]"

    - name: Configure AWS credentials (for S3)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    - name: Setup DVC
      run: |
        dvc remote add myremote ${{ secrets.DVC_S3_BUCKET }}
        dvc remote modify myremote profile default

    - name: Pull data from DVC
      run: |
        dvc pull -r myremote

    - name: Test data ingestion
      run: |
        dvc repro data_ingestion

    - name: Test feature engineering
      run: |
        dvc repro feature_engineering

    - name: Test model building
      run: |
        dvc repro model_building

    - name: Test Random Forest pipeline
      run: |
        dvc repro evaluate_rf_model

    - name: Validate metrics
      run: |
        python -c "
        import json
        # Check if metrics files exist and have valid content
        with open('model/metrics.json') as f:
            lr_metrics = json.load(f)
        with open('metrics/rf/metrics.json') as f:
            rf_metrics = json.load(f)
        
        # Validate accuracy thresholds
        assert lr_metrics.get('accuracy', 0) > 0.9, 'Linear Regression accuracy too low'
        assert rf_metrics.get('accuracy', 0) > 0.9, 'Random Forest accuracy too low'
        print('✅ All metrics validation passed!')
        "

    - name: Run basic tests
      run: |
        python -c "
        # Basic sanity tests
        import joblib
        import pandas as pd
        
        # Test if models can be loaded
        lr_model = joblib.load('model/lr_fake_news_model.joblib')
        rf_model = joblib.load('models/rf/rf_fake_news_model.joblib')
        vectorizer = joblib.load('data/features/rf/vectorizer.joblib')
        
        print('✅ All models loaded successfully!')
        "

    - name: Upload metrics as artifact
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-metrics
        path: |
          model/metrics.json
          metrics/rf/metrics.json
        retention-days: 30

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install black flake8 pytest

    - name: Check code formatting with black
      run: |
        black --check src/

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Test with pytest
      run: |
        pip install -r requirements-dev.txt
        pytest tests/ -v || echo 'No tests found, skipping'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        pip install bandit
        bandit -r src/ -f html -o security-report.html || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.html
        retention-days: 30
